{"version":3,"file":"Users.js","sourceRoot":"","sources":["../../models/Users.ts"],"names":[],"mappings":";;AAAA,+BAAkC;AAElC,oBAAqB,SAAS,EAAE,QAAQ;IACpC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE;QAC7B,EAAE,EAAE;YACA,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,IAAI;SACtB;QACD,IAAI,EAAE;YACF,IAAI,EAAE,QAAQ,CAAC,MAAM;YACrB,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;QACD,KAAK,EAAE;YACH,IAAI,EAAE,QAAQ,CAAC,MAAM;YACrB,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;QACD,QAAQ,EAAE;YACN,IAAI,EAAE,QAAQ,CAAC,MAAM;YACrB,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;KACJ,EAAE;QACC,KAAK,EAAE;YACH,YAAY,EAAE,UAAC,IAAI;gBACf,IAAM,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/D,CAAC;SACJ;QACD,YAAY,EAAE;YACV,WAAW,EAAE,UAAC,eAAe,EAAE,QAAQ,IAAK,OAAA,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,eAAe,CAAC,EAA7C,CAA6C;SAC5F;KACJ,CAAC,CAAC;AACP,CAAC;AAED,kBAAe,UAAU,CAAC","sourcesContent":["import bcrypt = require('bcrypt');\r\n\r\nfunction UsersModel (sequelize, Datatype) {\r\n    return sequelize.define('Users', {\r\n        id: {\r\n            type: Datatype.INTEGER,\r\n            primaryKey: true,\r\n            autoIncrement: true\r\n        },\r\n        name: {\r\n            type: Datatype.STRING,\r\n            allowNull: false,\r\n            validate: {\r\n                notEmpty: true\r\n            }\r\n        },\r\n        email: {\r\n            type: Datatype.STRING,\r\n            allowNull: false,\r\n            validate: {\r\n                notEmpty: true\r\n            }\r\n        },\r\n        password: {\r\n            type: Datatype.STRING,\r\n            allowNull: false,\r\n            validate: {\r\n                notEmpty: true\r\n            }\r\n        }\r\n    }, {\r\n        hooks: {\r\n            beforeCreate: (user) => {\r\n                const salt = bcrypt.genSaltSync();\r\n                user.set('password', bcrypt.hashSync(user.password, salt));\r\n            }\r\n        },\r\n        classMethods: {\r\n            isPassoword: (encodedPassword, password) => bcrypt.compareSync(password, encodedPassword),\r\n        }\r\n    });\r\n}\r\n\r\nexport default UsersModel;"]}