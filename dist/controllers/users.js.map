{"version":3,"file":"users.js","sourceRoot":"","sources":["../../controllers/users.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpStatus = require('http-status');\r\nimport User from '../interfaces/User';\r\n\r\n/**\r\n * Controller of all Users methods\r\n * \r\n * @export\r\n * @class UsersController\r\n */\r\nexport default class UsersController {\r\n\r\n    private Users;\r\n    \r\n    /**\r\n     * Default Response of requesitions\r\n     * \r\n     * @private\r\n     * @param {object} data - default response\r\n     * @param {number} [statusCode=HttpStatus.OK] - status of requesition\r\n     * @returns \r\n     * @memberof UsersController\r\n     */\r\n    private defaultResponse(data: object, statusCode: number = HttpStatus.OK) {\r\n        return { data, statusCode }\r\n    }\r\n\r\n    /**\r\n     * Default error response of requisitions\r\n     * \r\n     * @private\r\n     * @param {string} message - message error\r\n     * @param {number} [statusCode=HttpStatus.BAD_REQUEST]  - status of requisition\r\n     * @returns \r\n     * @memberof UsersController\r\n     */\r\n    private errorResponse(message: string, statusCode: number = HttpStatus.BAD_REQUEST){\r\n        return this.defaultResponse({ error: message }, statusCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of UsersController.\r\n     * @param {any} Users - model with Product's methods\r\n     * @memberof UsersController\r\n     */\r\n    constructor(Users) {\r\n        this.Users = Users;\r\n    }\r\n\r\n    /**\r\n     * Get all Users found\r\n     * \r\n     * @returns \r\n     * @memberof UsersController\r\n     */\r\n    public getAll() {\r\n        return this.Users.findAll({})\r\n            .then(result => this.defaultResponse(result))\r\n            .catch(error => this.errorResponse(error.message));\r\n    }\r\n\r\n    /**\r\n     * Get a specific user\r\n     * \r\n     * @param {number} id \r\n     * @memberof UsersController\r\n     */\r\n    public getById(id: number) {\r\n        return this.Users.findOne({ where: id })\r\n            .then(result => this.defaultResponse(result))\r\n            .catch(error => this.errorResponse(error.message));\r\n    }\r\n\r\n    /**\r\n     * Create a new user\r\n     * \r\n     * @param {User} data - informations of new User\r\n     * @memberof UsersController\r\n     */\r\n    public create(data: User) {\r\n        return this.Users.create(data)\r\n            .then(result => this.defaultResponse(result, HttpStatus.CREATED))\r\n            .catch(error => this.errorResponse(error.message, HttpStatus.UNPROCESSABLE_ENTITY));\r\n    }\r\n\r\n    /**\r\n     * Update a user\r\n     * \r\n     * @param {User} data - informations to be updated\r\n     * @param {number} id - id of user that will be updated\r\n     * @memberof UsersController\r\n     */\r\n    public update(data: User, id: number) {\r\n        return this.Users.update(data, { where: id })\r\n            .then(result => this.defaultResponse(result))\r\n            .catch(error => this.errorResponse(error.message, HttpStatus.UNPROCESSABLE_ENTITY));\r\n    }\r\n\r\n    /**\r\n     * Delete a user\r\n     * \r\n     * @param {number} id - id of user that will be deleted\r\n     * @memberof UsersController\r\n     */\r\n    public delete(id: number) {\r\n        return this.Users.destroy({ where: id })\r\n            .then(result => this.defaultResponse(result, HttpStatus.NO_CONTENT))\r\n            .catch(error => this.errorResponse(error.message, HttpStatus.UNPROCESSABLE_ENTITY));\r\n    }\r\n}"]}